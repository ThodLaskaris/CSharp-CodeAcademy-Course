Congratulations on completing this lesson on Iterators in C#! Weâ€™ve learned:

That we can use iterators to generate custom sequences of data.
We use the yield keyword to suspend execution and return a value to the caller.
public static IEnumerable<int> GetNumbers()
{
  yield return 1;
  yield return 2;
  yield return 3;
}

Copy to Clipboard

Our custom iterators can be used in foreach 
loops
Preview: Docs Loading link description
 and other collection operations.
foreach (int number in GetNumbers())
{
  Console.WriteLine(number);
}

Copy to Clipboard

These iterators implement the IEnumerable and IEnumerator
interfaces
Preview: Docs Loading link description
 under the hood.
IEnumerable<int> numbers = GetNumbers();
IEnumerator<int> enumerator = numbers.GetEnumerator();
while (enumerator.MoveNext())
{
  int number = enumerator.Current;
  Console.WriteLine(number);
}

Copy to Clipboard

We can use custom iterators to create sequences of data that are generated on demand, which can be more memory-efficient and improve the performance of our programs through lazy evaluation and deferred execution.
public static IEnumerable<int> GetPrimes()
{
  for (int number = 2; ; number++)
  {
    if (IsPrime(number))
    {
      yield return number;
    }
  }
}

Copy to Clipboard

We can use advanced patterns to create custom iterators with more complex behavior, such as nested iterators and infinite iterators.
static IEnumerable<IEnumerable<int>> ListOfLists()
{
  yield return new List<int> { 1, 2, 3 };
  yield return new List<int> { 4, 5, 6 };
  yield return new List<int> { 7, 8, 9 };
}

static IEnumerable<int> Flatten()
{
  foreach (var list in ListOfLists())
  {
    foreach (var item in list)
    {
      yield return item;
    }
  }
}

Copy to Clipboard

Overall, iterators are a powerful feature in C# that allows us to create custom sequences of data and improve the efficiency of our programs.